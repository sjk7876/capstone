AI Assistance In Team Fight Tactics
Jiakai Peng
Rochester Institute of Technology
United States

ABSTRACT
This study aims to determine the effectiveness of machine learning
in analyzing game data of the popular game "Teamfight Tactics,"
specifically to help players adjust and perfect their game strategies
by predicting the result of each battle. By collecting 2,000 pieces
of data, this study used the Random Forest model to predict player
wins and losses. It was found that the model was able to predict
player wins and losses with about 70% accuracy. This finding not
only enhances the understanding of TFT’s approach to game data
analysis but also enables players to more effectively change their
strategies to improve game performance based on the predictions
and post-game analysis provided by the model. Overall, this study
provides valuable insights into the use of random forest algorithms
to optimize game strategies and lays the foundation for further
exploration in the field of game strategy research in the future.

These tools include databases of champions and items, win rate
statistics, lineup recommendations, and more. However, these tools
are usually focused on providing information and not directly providing decision making. Therefore, it is very meaningful to develop
a tool to help players make decisions at this stage.
In such a highly strategic game, players not only have to counter
the strategies of other players, but also have to have a deep understanding of the game mechanics and make quick decisions. The
complexity of the game is reflected in various ways, such as the
choice of champions, team composition, distribution of items, and
prediction of the enemy’s strategy. These decisions need to be based
on an accurate analysis of the current game state, as well as a prediction of possible changes in game progress. For most players,
especially new and intermediate players, it is a huge challenge to
efficiently collect and process in-game information and then make
optimal decisions.

KEYWORDS
Team fight tactics, machine learning, artificial intelligence, Web
Application

1

BACKGROUND

Team Fight Tactics(TFT) is a game developed by Riot Games that
breaks from the traditional automated matchmaking board game.
Players deploy their champions(units) on their own chessboard
and compete against seven other players in each game. The goal
of each player is to win each game and survive by using strategies.
Players need to understand the game’s complex economic system
and make the best decisions for the current stage. Unlike the usual
situation of taking first place, TFT only needs to finish in the top 4
to win the game.
In recent years, Artificial Intelligence (AI) and machine learning
technologies have been increasingly used in the world of gaming.
People have started to enhance the player experience by making
the game AI more challenging, or to assist players in improving
their gameplay skills. In chess and other competitive games, there
are already many proven AIs that can learn from the strategies
of all previous top players. They can analyze game data, predict
opponent behaviors, and recommend the best tactics and strategies
to beat 99% of players out there. These technologies not only help
players make better decisions in complex gaming environments,
but also provide training and learning opportunities by simulating
against top players.

2

3

PROBLEM STATEMENT

The main problem faced in this study is split into two parts: one
is the difficulty of information collection, and the other is how to
quickly develop an efficient classification model to help players
make decisions. For the difficulty of information collection, Riot
Games’ official API [3] provides developers with data on the results
of TFT matches, but does not provide detailed information during
the match, such as lineup changes, equipment choices, etc.
This lack of information makes it difficult for developers to analyze the dynamic changes in the game, which in turn affects the
accuracy of predicting players’ combat power and win rates. Developing a model that can accurately predict a player’s current stage
win rate in a limited amount of time is also extremely challenging.
This model needs to be able to combine the player’s current lineup,
equipment, hextech choices, and the upcoming opponent’s lineup,
thus provide real-time win rate prediction and decision-making
support for the player.
Solving the above problems is important to improve the player
experience. By developing new information collection methods,
players can better understand the key decision points in the game
process, thus improving the quality of their decisions. In a game like
TFT, success depends heavily on accurate judgment of the current
situation and decision-making. If players can be assisted by AI to
know their win rate at the current stage and make decisions based
on this information, then it can significantly improve their gaming
experience afterall.

MOTIVATION

Though TFT’s playing style is popular among gamers, the complex
strategies and constantly changing gameplay elements within the
game also bring challenges to the players. The developers have
created a variety of support tools that aim to help players gather
information, analyze data, and formulate strategies(such as OP.GG
Chess.gg [1]).

4

RELATED WORK

In the field of AI game research, machine learning and deep learning techniques have been applied widely to game state prediction
and player behavior analysis. Woh [4] shows the ability of machine
learning in accurately predicting upcoming events in games by
combining learning methods such as Random Forest and XGBoost.

CSCI 788, Capstone Report, 2024

This method improves prediction accuracy by combining multiple models, especially when dealing with game data with a large
number of hidden variables and uncertainties.
Panchal [2] focuses on the application of deep learning techniques to the prediction of game state trends. Convolutional neural
networks and recursive neural networks are considered to have
great potential in understanding the complex patterns of game
states because of their advantages in processing sequential data
and image recognition. By combining both approaches, we can
develop more accurate and adaptive game state prediction models,
which in turn can provide real-time, customized decision support
to players.
Although these studies provide good insights and methodologies,
they mainly focus on theory and board game applications rather
than on board games like TFT. Existing solutions often lack the
ability to predict the dynamic state of a particular game in real time,
especially when dealing with complex game mechanics and rapidly
changing game environments. Therefore, these papers can only be
used as a reference and not directly applied to machine learning
for TFT.

5

Jiakai Peng

Figure 1: Project Process
winning player does not lose life points, while the losing player
loses points by the number of units remaining on the board and the
current phase of the game. The elements of each player’s board will
be described below to help understand the following experiment.
Fig 1 is an example board picture.

SOLUTION

The solution proposed in this study combines an online application and a machine learning model. The aim is to help Teamfight
Tactics (TFT) players improve their game performance through
careful data collection, processing and analysis. The core of the
project consists of two data collection paths: in-game data is collected through a self-built web application, while end-game data
is captured using the official Riot Games API. This data is cleaned
and feature engineered, and then trained using a random forest algorithm to predict win rates at different stages of the game. Finally,
through an intuitive user interface, players have real-time access
to the gameplay information and win rate predictions needed to
make better decisions.
For the design of the online web application, project used Flask
as the back-end development framework combined with front-end
technologies (CSS, JavaScript, HTML) to build a user-friendly web
interface. The application was deployed through the DigitalOcean
cloud platform, providing an easy-to-access and use platform for
players to submit board information during the game. The application focuses on data security and user experience in a special
way, preventing data from being manipulated with a login system.
On the backend side, the collected data goes through a strict cleaning and processing process to ensure the quality of the data used
to train the Random Forest model. This model is able to provide
win rate prediction and strategy suggestions based on the player’s
current game state, helping the player to make better decisions in
TFT.

Figure 2: TFT game board

6.2

Gold and Experience(EXP)

The primary resources in the game are gold and experience. On the
board, you will have a shop with five champion units, each costing
1 to 5 gold. Players can refresh the shop by using gold to change
the current champions or buy champions from the shop to enhance
their combat abilities.
Gold can also be used to buy experience, which allows the player
to level up from the initial level 1 to the maximum level 10. Depending on the current level, you can place the same number of units
on your board, with more units representing more potent combat
abilities. The higher player level also increases the probability of
getting high-cost champions from the shop.Fig 2 is how the shop
looks like.

6 GAME BASICS
6.1 Team Fight Tactics(TFT)
TFT is a board game consisting of several vital elements. Each player
has a starting life point of 100, and when a player’s life point reaches
0, it is the end of the game for that player. The game is divided
into a plan phase and a battle phase, each consisting of two players
playing against each other. When the battle phase is complete, the

Figure 3: shop with gold and experience

AI Assistance In Team Fight Tactics

6.3

CSCI 788, Capstone Report, 2024

Chess Piece(Champion unit)

A piece unit in a standard chess game is then a champion unit
in TFT. In TFT set 10, there are 60 champions. All champions are
categorized into one to five costs, with higher costs meaning more
powerful. Most units have two traits, and multiple units with the
same traits can make a player’s lineup even more powerful. For
example, brawler classes are divided into tiers like 2-Brawler, 4Brawler, etc.

Figure 5: game timeline from CHESS.GG

Figure 4: chess unit(vi)
The higher the tier, the stronger the effect. Combinations of different units can trigger various other traits to make the combination
even more powerful. Units are also categorized into one, two, and
three stars. A two-star requires three one-stars (for each champion
purchased), and a three-star requires two two-stars. This means
three stars require ten units to be bought from the shop. The higher
the cost of the units, the less they will be stocked in the shop. The
table below shows the probability of purchasing a unit of this cost
at different levels and how many units are in the pool.

6.4

Planning and battle phase

In the planning phase, players can equip their units, place them on
the preparation bench or the board, buy units or experience from
the shop, and then enter the battle phase to fight against the players.
In the Battle Phase, the player is automatically matched against the
player to determine the winner. The bench allows players to place
more units on their side, which will prevent these units from going
to the next battle. In total, there are nine slots for players to place.

6.5

Extra stage

The following figure shows the stages of this game. It contains a
Carousel stage where eight players choose one from 8 randomized
units (with one or more pieces of items) in order of ranking and an
extra stage at the end of each primary phase. In the extra stage, free
gold and equipment are randomly provided after a battle of PVE.

6.6

Item

Items are divided into basic items, and advanced items are composed
of two basic items. Different items have different effects that can
be put on the units to enhance the player’s combat power. Items
can be obtained from Hextech, as well as some extra stages.

6.7

Hextech Augment

Players are given Hextech augments in stages 2-1,3-2 and 4-2. An
augment in this case is an option to strengthen a unit or gain
experience/money/item. There are three options for the player
to choose from each time, each with a refresh opportunity. Hex

Figure 6: basic item and advanced item from CHESS.GG

augments are also divided into three strengths - silver, gold, and
prismatic- and all players are given the same color augment every
time they choose to keep things fair.

7

DATA COLLECTION

In general, the collection of game process data is usually obtained
using the game’s official API. The official API developer website
given by RIOT does not provide the collection of in-game data,
which causes considerable difficulty in data collection. To solve this
problem, this project used a self-made website to collect data.

7.1

Website collector

To enhance the user experience, many user-friendly features have
been added to it. For example, when the user adds a unit, an option
box will automatically pop up, and after selecting it, the following
selection box will automatically open. When the user selects a unit
on his board, he can quickly search for it by the nicknames of some
champions to ensure efficiency.
To keep track of multiple players’ games, this website also provides the functions of paging, and it can modify the name of each
page, which makes it easier for players to keep track of each game.
To maintain uniformity, all player 1(left side)’s board information is
synchronized, which makes it quicker for players to change pages.
Since most of the information is collected by Chinese players, the
project utilizes the Chinese language to make it more convenient.
In addition, a login screen was designed to prevent attacks. In
terms of error prevention, some options are designed to be required
to prevent players from submitting incorrect information. This will
make the input data more efficiently processed before the data
cleansing step. After the website was built, it was deployed online
using Digital Ocean.
A Python flask is applied as the backend after the web page.
Players can submit to the backend database through the REST

CSCI 788, Capstone Report, 2024

Jiakai Peng

Figure 7: website collector
API transfer. MongoDB is a NoSQL database that provides high
performance, high availability, and easy scalability, which is suitable
for handling large amounts of data and complex queries. In this
project, MongoDB can effectively store and manage players’ match
data, including players’ boards, matchmaking wins and losses, and
other information. Figure 5 shows an example of the game data
collection page.

7.2

Post Game Data Collect

RIOT’s official API provides players’ TFT post-game data, which
provides a valuable resource for game analytics. With this data,
developers and data analysts can gain insight into players’ game
behavior, strategy preferences, and various trends within the game.
For example, it is possible to analyze which combinations most often
lead to victory, or what actions players tend to take at different
game stages. This data allows the AI to provide recommendations
for the player’s strategy, so that the player can better decide their
next move. To improve the quality of the data, this project selected
the post-game data from the 200 strongest players in the current
season.

8

ALGORITHM

Game analysis is faced with a high-dimensional data problem, in
which the choice of each unit, its star level, and the game stage
may impact the final victory or defeat. The Random Forest algorithm is used in the project because of its efficiency and accuracy in
handling such problems. It handles high-dimensional data and provides information about which factors significantly impact the win
rate by evaluating the importance of features. In addition, Random
Forest reduces the risk of overfitting by constructing multiple decision trees and enhances the model’s generalization ability, which
is especially important in an environment like TFT, where there is
a lot of uncertainty.
Taking the game TFT as an example, each champion has threestar levels. On top of that, there are different item combinations
plus different augments, resulting in a high-dimensional feature
space formed by these other features. In addition, champions are
often non-linear and complex, not only because of the additional
effects of star ratings and items but also because of their skill effects.

Random forests can capture these complex non-linear relationships
by building multiple decision trees.
In manual data collection, some information may need to be
completed, such as the lack of information on some champions
in some battle records. Random forests can handle such missing
data situations better. Finally, because Random Forest is a relatively
complex integrated learning model, its feature importance assessment can guide players to make better strategy choices. In the blow
figure 8, it provides an example of how the algorithm works for a
single tree inside the forest.

9 EXPERIMENT
9.1 Data Cleaning
In the Mongodb database, the project is split into two datasets." online_dataset" is used to store the data collected by the web collector.
In contrast, "post_game" stores the game summary data collected
using the official API. Before being uploaded to the database, the
data was cleaned, and a data processing function was written to
convert the raw data of the TFT game into a more structured and
standardized format. This function accomplishes several tasks: first,
it initializes a data structure to organize all relevant information,
such as player information, game stages, and match results. Then,
the function traverses the raw data to identify and extract the
player’s unit information, including name, star rating, and item. It
also processes location information and matches results to ensure
all data is stored in a specific format. In addition, the function sets
default values to handle possible missing cases in the data. In the
end, the process produces a clean dataset. The figure below shows
a screenshot of a cleaned example.

9.2

Feature engineering

While processing TFT game data, the project adopted a multidimensional feature engineering strategy to refine and optimize
the model. First, considering that each champion can have three
different star levels, and the difference of each star level directly
affects the champion’s combat ability, the project created separate
features for each star level of each champion. Since the star level
and name of the champions are fundamental, the project retained all

AI Assistance In Team Fight Tactics

CSCI 788, Capstone Report, 2024

Figure 8: tree example
the champions at its start level, with three-star levels corresponding
to each champion and 180 features.
In addition, traits are a critical factor in determining the strength
of a team’s combination, and the project included all 31 traits and
their possible activation levels, as different trait levels also largely
determine the team’s overall performance.
The project also considers the game stage’s secondary important
feature, as various game stages can significantly impact a team’s
strategy and performance. As for the Hex augment feature, although
the Hex system provides multiple types of gains, including economy,
defense, and attack, the project chose to focus on the defense and
attack Hexes in the feature engineering. It combined these Hexes
into a single feature to capture the impact of these gains on the
outcome of the battle more effectively.

Figure 9: features
To further optimize the features and efficiently extract information that would help with prediction, the project wrote a feature
extraction function, "extract_features," to extract critical information from the game data. The function initializes multiple feature
counters, including star ratings for each champion, usage of each

item, and the number of activations for each trait. By iterating
through each player’s units and using Hexes, the project not only
counts the star rating of each unit but also provides a detailed count
for each trait and item, with particular attention to the number of
Attacking Hexes, because they directly affect the game’s offensive
strategy. Finally, the function integrates all these statistics into a
dictionary and returns them for subsequent analysis.

9.3

Model building

In this project, the Random Forest algorithm was employed to
build predictive models designed to optimize performance by precisely tuning the model parameters. Using "GridSearchCV," several
combinations of parameters were systematically tested, it has the
number of trees called "n_estimators", and the maximum depth of
the tree named max_depth, and the minimum number of samples
required for node to split named min_samples_split. In addition,
the "class_weight" parameter is considered to deal with possible
class unbalance in the dataset effectively. This approach allows for
carefully exploring how different parameters affect the model’s
performance and determining the best combination of parameters.
The optimal combination of these parameters is an optimal depth
of 10, a minimum sample split of 20, and several trees of 100. These
settings improve the model’s ability to generalize on unseen data.
Next, these parameters will be applied to train the final model, and
predictions will be made based on new data to validate the model
in practice.

9.4

Training Results

9.4.1 Game result prediction. After evaluating the Random Forest model, the results of the model’s performance show some key

CSCI 788, Capstone Report, 2024

Jiakai Peng

Figure 10: set 10 champion unit win rate
indicators. The accuracy of about 70% shows that the model is reliable in predicting the correct category. Specifically, for the category
"win," the model shows a high recall of 0.93, meaning that the model
can identify most actual wins correctly; however, its recall for the
category "lose" is only 0.25, indicating that the model is not as good
at identifying losses as it is at recognizing them.
In addition, the F1 score of 0.81 for win predictions shows a good
balance of precision and recall, while the F1 score for loss predictions is only 0.36, indicating that the model needs to be further
optimized to improve the prediction of losses. As can be seen from
the confusion matrix, the model is somewhat biased in predicting
Positive, correctly predicting 240 wins but also incorrectly predicting 97 losses as wins. For Negative, the model correctly identified
only 33 cases and incorrectly predicted 130 losses as wins. This bias
may stem from data imbalance or the disproportionate influence
of particular features, causing the model to favor predicting more
common or easily recognizable outcomes.

9.4.2 Post game evaluation. This chart shows the win rates of
different heroes in the TFT game, with data sourced from the official
RIOT Games API. The chart sorts heroes by win rate size, showing
the distribution of win rates from lowest to highest, with specific
heroes having win rates close to 0% and others as high as around
70%.
This wide range of win rates reflects champions’ varying performance and balance in the game’s current meta. The horizontal axis
of the chart indicates the percentage of the win rate. In contrast,
the vertical axis lists the names of the individual champions, with
the length of each bar representing the corresponding win rate,
with the more extended bar indicating a higher win rate for that
hero. Using data from the official API, this visualization tool allows
players and analysts to quickly identify champions performing well
in the game and those that may need to be strategically adjusted.

9.5

Figure 11: results and confusion matrix

Result explaination

The random forest model developed in this project provides an
essential decision-support tool for players of the game TFT, which
allows players to predict their win/loss scenarios in the current
stage with about 70% probability through a 70% accuracy rate. This
predictive capability is precious for strategy games, allowing players
to adjust tactics and strategies based on the predicted outcome.
In addition, the model provides insights about which champions
are performing strongly in the current version, which can help
players better select and deploy their teams, thus improving their
overall performance in the game. Based on this information, a
prediction feature on the web app allows players to fill out their

AI Assistance In Team Fight Tactics

lineups while predicting whether their stage will win the battle and
thus change their strategy.

10

IMPROVEMENTS AND CONCLUSION

The model’s current accuracy is different from expected, mainly
due to the small amount of data (only 2000 records) and the uneven distribution of the data (more wins and fewer losses). This
phenomenon results from the difficulty of data collection: manual
data entry, although optimized as much as possible, still needs to
be improved.
Players who assisted in data input needed help keeping detailed
data records simultaneously as they were playing. They were usually only able to record their gameplay rather than detailed data
for all players. Additionally, changes to pieces and elements during
season updates hindered real-time data collection.
Even this project uses a method of filling in data by watching
and pausing video footage of high-level players, which improves
the accuracy of the filling-in. Still, it takes about 20 minutes to fill
in data for one game. To further enhance the efficiency of data
collection and reduce labor input, YOLO or other image recognition technology should be used to identify and record game data
automatically in real-time.
Several problems were encountered in updating the model training results into the web application, including frequent error messages and incorrect predictions of "loss." In addition, web development took up most of the project time, which limited the possibility
of further optimization of the model itself.

CSCI 788, Capstone Report, 2024

To reduce the load of developing web applications and increase
efficiency, a more automated system that utilizes image recognition
technology to extract data directly from the game in real time is
planned. This will not only increase the level of automation in data
collection but also eliminate the need for a large amount of manual
data entry work.
In addition, exploring the possibility of cooperation with the
official, if the data support can be obtained directly from the game
developers, will significantly improve the quality and completeness
of the data, which will optimize the model’s performance.
Overall, this project has successfully utilized the Random Forest
algorithm to develop a win rate prediction model for the game of
TFT, which initially achieves an accuracy of about 70%, providing
players with the win rates of some champions and the current
stage wins and losses to help them develop more effective game
strategies. Despite the challenges of inefficient data collection and
insufficient data, the model has demonstrated enough potential for
future strategy development.

REFERENCES
[1] LoLCHESS.GG. 2023. TFT Stats, Leaderboards, League of Legends Teamfight
Tactics. https://lolchess.gg/?hl=en-US.
[2] Mihir Rajesh Panchal, Chintan Jagdish Dodia, and Pankaj Dulabhai Rathod. 2023.
Game Machine and Algorithm towards Trends in Game States using Machine
Learning and Deep Learning. In 2023 10th International Conference on Computing
for Sustainable Global Development (INDIACom). 299–304.
[3] Riot. 2023. Riot Developer Portal. https://developer.riotgames.com/apis.
[4] Sange-Myeong Woh and Jee-Hyong Lee. 2018. Game State Prediction with Ensemble of Machine Learning Techniques. In 2018 Joint 10th International Conference
on Soft Computing and Intelligent Systems (SCIS) and 19th International Symposium on Advanced Intelligent Systems (ISIS). 89–92. https://doi.org/10.1109/SCISISIS.2018.00025

